pipeline {
    agent any

    environment {
        MODULE_NAMESPACE_1  = 'ingress-nginx'
        MODULE_NAMESPACE_2  = 'ticketing-app'
        
        GCP_PROJ            = 'ticketing-app-prod' 
        GCP_REGION          = 'us-east1'

        K8S_CLUSTER_NAME    = 'ticketing-app-k8-cluster-uat' 
        K8S_CLUSTER_ZONE    = 'us-east1-c'
        K8S_NODE_TYPE       = 'n1-standard-1'
        K8S_NODE_COUNT      = 1

        KUBECTL_DEV_CONTEXT = 'docker-desktop'
        DOCKER_IMAGE_NAMES = ' '

        ARTIFACT_REGISTRY_NAME = 'ticketing-app-artifact-registry'
        ARTIFACT_REGISTRY_LOCATION = 'us'
    }

    stages {
        stage('Install required tools on Agent Node') {
            steps {
                withCredentials([string(credentialsId: 'wsl-agent-sudo-password', variable: 'SUDO_PASSWORD')]) {
                    sh '''
                        ## Switch to Root user
                        echo "${SUDO_PASSWORD}" | sudo -SE su root
                        whoami
                        
                        ## Install basic utilities
                        sudo apt-get update
                        sudo apt-get install -y curl jq
                        
                        ## Install Skaffold...
                        if !(skaffold version)
                        then
                            echo "Installing Skaffold"
                            curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
                            sudo install skaffold /usr/local/bin/
                        else
                            echo "Skaffold is already installed"
                        fi
                        
                        ## Install Docker...
                        docker_version_output=$(docker -v 2>&1)
                        if [ $? -eq 0 ]
                        then
                            echo "Docker is already installed"
                        else
                            echo "Installing Docker"
                            # Remove any previously installed unofficial Docker packages
                            for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do 
                              sudo apt-get remove $pkg 
                            done
                            
                            # Add Docker official GPG key
                            sudo apt-get update
                            sudo apt-get install ca-certificates curl gnupg
                            sudo install -m 0755 -d /etc/apt/keyrings
                            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                            sudo chmod a+r /etc/apt/keyrings/docker.gpg
                            
                            # Add the repository to Apt sources
                            echo \
                              "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                              "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
                              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                            sudo apt-get update
                            
                            # Install the latest version
                            sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                            
                            # Test the installation
                            sudo docker run hello-world
                        fi
                        
                            
                        ## Install Kubectl...
                        kubectl_version_output=$(kubectl version --client 2>&1)
                        if [ $? -eq 0 ]
                        then
                            echo "Kubectl is already installed"
                        else
                            echo "Installing Kubectl"
                            # Update the apt package index and install packages needed to use the Kubernetes apt repository
                            sudo apt-get update
                            sudo apt-get install -y apt-transport-https ca-certificates
                            
                            # Download the public signing key for the Kubernetes package repositories
                            curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
                            
                            # Add the appropriate Kubernetes apt repository. This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
                            echo \
                            "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | \
                            sudo tee /etc/apt/sources.list.d/kubernetes.list > /dev/null
                            
                            # Finally install kubectl
                            sudo apt-get update
                            sudo apt-get install -y kubectl
                            
                            # Test to ensure the version installed is as mentioned
                            kubectl version --client
                            
                            # Verify kubectl configuration by acesing a K8 cluster. Note:- For kubectl to do that, it needs a kubeconfig file located at ~/.kube/config
                            kubectl cluster-info
                        fi


                        ## Install Ansible...
                        ansible_version_output=$(ansible --version)
                        if [ $? -eq 0 ]
                        then
                            echo "Ansible is already installed"
                        else
                            echo "Installing Ansible"
                            # Update the apt package & install necessary packages 
                            sudo apt-get update
                            sudo apt-get install -y ansible
                        fi


                        ## Install Google Cloud SDK...
                        gcloud_version_output=$(gcloud version)
                        if [ $? -eq 0 ]
                        then
                            echo "Google Cloud SDK is already installed"
                        else
                            echo "Installing Google Cloud SDK"
                            # Update the apt package & install necessary packages 
                            sudo apt-get update
                            sudo apt-get install apt-transport-https ca-certificates gnupg curl sudo

                            ########
                            ## Add the appropriate Google Cloud apt repository. Only one of the below options shall be executed.
                            ########

                            # If your distribution supports the signed-by option, run the following command
                            echo "deb [signed-by=/usr/share/keyrings/cloud.google.asc] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

                            # If your distribution doesn't support the signed-by option, run the following command
                            echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

                            ########
                            ## Import the Google Cloud public key. Only one of the below options shall be executed.
                            ########
                            # If your distribution's apt-key command supports the --keyring argument, run the following command
                            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -

                            # If your distribution's apt-key command doesn't support the --keyring argument, run the following command
                            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

                            # If your distribution (Debian 11+ or Ubuntu 21.10+) doesn't support apt-key, run the following command
                            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /usr/share/keyrings/cloud.google.asc

                            # Finally install Google Cloud SDK
                            sudo apt-get update
                            sudo apt-get install -y google-cloud-cli

                            # Test to ensure the version installed is as mentioned
                            gcloud version 

                            # Following commands to be executed outside of this Jenkinsfile for initializing & configuring Google Cloud SDK
                            # gcloud auth login
                            # gcloud init
                        fi

                        ## Switch back to default user
                        exit
                    '''
                }                
            }
        }
        
        stage('Checkout Git Repo') {
            steps {
                // Clone the Git Repo in the Agent
                checkout scmGit(branches: [[name: '*/main']], extensions: [submodule(recursiveSubmodules: true, reference: '')], userRemoteConfigs: [[url: 'https://github.com/arnab-bhowmik/Ticketing-App.git']])
            }
        }
        
        stage('Install NPM Dependencies') {
            steps {
                dir("${env.WORKSPACE}/auth-service"){
                    echo "Current Directory is:"
                    sh "pwd"
                    sh 'npm install'
                }
                dir("${env.WORKSPACE}/client"){
                    echo "Current Directory is:"
                    sh "pwd"
                    sh 'npm install'
                }
                dir("${env.WORKSPACE}/Custom-Modules"){
                    echo "Current Directory is:"
                    sh "pwd"
                    sh 'npm install'
                }
            }
        }
        
        stage('Deploy Application on Local Kubernetes Cluster') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'jwt-secret-key', variable: 'JWT_KEY')]) {
                        withEnv(["MODULE_NAMESPACE_1=${env.MODULE_NAMESPACE_1}","MODULE_NAMESPACE_2=${env.MODULE_NAMESPACE_2}","KUBECTL_DEV_CONTEXT=${env.KUBECTL_DEV_CONTEXT}"]) {
                            dir("${env.WORKSPACE}"){
                                echo "Current Directory is:"
                                sh "pwd"
                                
                                sh '''
                                    # Set the Kubernetes context explicitly
                                    kubectl config use-context ${KUBECTL_DEV_CONTEXT}

                                    # Verify the kubectl context
                                    kubectl config current-context
                                    
                                    # Deploy the ingress-nginx controller on Kubernetes cluster via Skaffold
                                    skaffold deploy --profile dev --module ${MODULE_NAMESPACE_1}
                                    
                                    sleep 20
                                    echo "Displaying the Kubernetes Deployments, Pods & Services for namespace - ${MODULE_NAMESPACE_1}"
                                    kubectl get deployment  -n ${MODULE_NAMESPACE_1}
                                    kubectl get pods        -n ${MODULE_NAMESPACE_1}
                                    kubectl get services    -n ${MODULE_NAMESPACE_1}
                                    
                                    # Create the application namespace
                                    kubectl create namespace ${MODULE_NAMESPACE_2}
                                    
                                    # Create a JWT Secret to be used for Authentication
                                    kubectl create secret generic jwt-secret -n ${MODULE_NAMESPACE_2} --from-literal=JWT_KEY="${JWT_KEY}"
                                    
                                    # Build the Application Docker Images via Skaffold
                                    skaffold build --profile dev --module ${MODULE_NAMESPACE_2} --file-output=build_artifacts.json
                                    
                                    # Deploy the built artifacts on Kubernetes cluster via Skaffold
                                    skaffold deploy --profile dev --module ${MODULE_NAMESPACE_2} --build-artifacts=build_artifacts.json
                                    
                                    sleep 20
                                    echo "Displaying the Kubernetes Deployments, Pods & Services for namespace - ${MODULE_NAMESPACE_2}"
                                    kubectl get deployment  -n ${MODULE_NAMESPACE_2}
                                    kubectl get pods        -n ${MODULE_NAMESPACE_2}
                                    kubectl get services    -n ${MODULE_NAMESPACE_2}
                                '''
                            }
                        }
                    }
                }
            }
        }
        
        stage('Test APIs for User SignUp/SignIn/SignOut & Authentication') {
            steps {
                dir("${env.WORKSPACE}/auth-service"){
                    echo "Current Directory is:"
                    sh "pwd"
                    sh 'npm test'
                }
            }
        }
        
        stage('Push Images to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        withEnv(["DOCKER_IMAGE_NAMES=${env.DOCKER_IMAGE_NAMES}"]) {
                            sh '''
                                docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD

                                for item in $(cat build_artifacts.json | jq -c '.builds[]'); do
                                    # Extract the image name and corresponding tag
                                    echo "Extracting the image name and corresponding tag..."
                                    imageName=$(echo "$item" | jq -r '.imageName')
                                    tag=$(echo "$item" | jq -r '.tag | split(":")[1]')
                                    
                                    # Tag the extracted Docker image before pushing to Docker Hub
                                    echo "Tagging the extracted Docker image before pushing to Docker Hub"
                                    docker tag $imageName:$tag $DOCKER_HUB_USERNAME/$imageName:latest
                                
                                    # Push the image to Docker Hub
                                    echo "Pushing the image to Docker Hub"
                                    docker push $DOCKER_HUB_USERNAME/$imageName:latest
                                
                                    # Print the results & delete the :latest tagged image
                                    echo "Pushed image $imageName with tag $tag to Docker Hub with tag as latest"
                                    docker rmi $DOCKER_HUB_USERNAME/$imageName:latest
                                    
                                    # Save the image name as environment variable to access later for cleanup
                                    updatedArray="${DOCKER_IMAGE_NAMES},${imageName}"
                                    DOCKER_IMAGE_NAMES=$(echo $updatedArray | sed 's/^[,[:space:]]*//;s/[,[:space:]]*$//')
                                    echo "Updated image name list: ${DOCKER_IMAGE_NAMES}"  
                                done
                                
                                # Store the environment variable in a file to pass it to the next stage
                                echo "${DOCKER_IMAGE_NAMES}" > docker_image_names.txt
                            '''
                        }
                    }
                }
            }
        }

        stage('Push Images to Google Cloud Artifact Registry') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gke-service-account-key', variable: 'GCLOUD_KEY')]) {
                        withEnv(["DOCKER_IMAGE_NAMES=${env.DOCKER_IMAGE_NAMES}","GCP_PROJ=${env.GCP_PROJ}","K8S_CLUSTER_NAME=${env.K8S_CLUSTER_NAME}","K8S_CLUSTER_ZONE=${env.K8S_CLUSTER_ZONE}","ARTIFACT_REGISTRY_NAME=${env.ARTIFACT_REGISTRY_NAME}","ARTIFACT_REGISTRY_LOCATION=${ARTIFACT_REGISTRY_LOCATION}"]) {
                            sh '''
                                # Set the Kubernetes context explicitly to the Google Cloud Kubernetes Cluster
                                # KUBECTL_GCLOUD_CONTEXT="gke_${GCP_PROJ}_${K8S_CLUSTER_ZONE}_${K8S_CLUSTER_NAME}"
                                # kubectl config use-context ${KUBECTL_GCLOUD_CONTEXT}

                                # Verify the kubectl context
                                # kubectl config current-context
                                
                                # Authenticate with Google Cloud using a service account key
                                gcloud auth activate-service-account --key-file=${GCLOUD_KEY}

                                # Set the GKE cluster context
                                # gcloud container clusters get-credentials ${K8S_CLUSTER_NAME} --zone ${K8S_CLUSTER_ZONE} --project ${GCP_PROJ}

                                for item in $(cat build_artifacts.json | jq -c '.builds[]'); do
                                    # Extract the image name and corresponding tag
                                    echo "Extracting the image name and corresponding tag..."
                                    imageName=$(echo "$item" | jq -r '.imageName')
                                    tag=$(echo "$item" | jq -r '.tag | split(":")[1]')

                                    # Create the corresponding Google Cloud Image name
                                    gcrImage="gcr.io/${GCP_PROJ}/$imageName:latest"
                                    # gcrImage="${ARTIFACT_REGISTRY_LOCATION}-docker.pkg.dev/${GCP_PROJ}/${ARTIFACT_REGISTRY_NAME}/$imageName:latest"
                                    
                                    # Tag the extracted Docker image before pushing to Google Cloud Artifact Registry in the format gcr.io/project/repo/image:latest
                                    echo "Tagging the extracted Docker image before pushing to Google Cloud Artifact Registry"
                                    docker tag $imageName:$tag $gcrImage
                                
                                    # Push the image to Google Cloud Artifact Registry using service account 
                                    # Ensure the service account has correct access - artifactregistry.writer & artifactregistry.reader on the Container/Artifact Registry
                                    echo "Pushing the image to Google Cloud Artifact Registry"
                                    docker push $gcrImage
                                
                                    # Print the results & delete the :latest tagged image
                                    echo "Pushed image $imageName with tag $tag to Google Cloud Artifact Registry with tag as latest"
                                    docker rmi $gcrImage

                                    # Replace the image name in the corresponding Kubernetes deployment manifest file
                                    if echo "$imageName" | grep -q "auth" 
                                    then
                                        sed -i "s|image:.*|image: $gcrImage|" infra/k8s/auth-service/*.yaml
                                        sed -i "s|imagePullPolicy:.*|imagePullPolicy: Always|" infra/k8s/auth-service/*.yaml
                                    elif echo "$imageName" | grep -q "client" 
                                    then
                                        sed -i "s|image:.*|image: $gcrImage|" infra/k8s/client/*.yaml
                                        sed -i "s|imagePullPolicy:.*|imagePullPolicy: Always|" infra/k8s/client/*.yaml
                                    fi

                                    # Save the image name as environment variable to access later for cleanup
                                    updatedArray="${DOCKER_IMAGE_NAMES},${imageName}"
                                    DOCKER_IMAGE_NAMES=$(echo $updatedArray | sed 's/^[,[:space:]]*//;s/[,[:space:]]*$//')
                                    echo "Updated image name list: ${DOCKER_IMAGE_NAMES}" 
                                done

                                # Store the environment variable in a file to pass it to the next stage
                                echo "${DOCKER_IMAGE_NAMES}" > docker_image_names.txt
                            '''
                        }
                    }
                }
            }
        }
        
        // stage('Deploy Application on Google Cloud Kubernetes Cluster') {
        //     steps {
        //         script {
        //             withCredentials([file(credentialsId: 'gke-service-account-key', variable: 'GCLOUD_KEY'),string(credentialsId: 'jwt-secret-key', variable: 'JWT_KEY')]) {
        //                 withEnv(["MODULE_NAMESPACE_1=${env.MODULE_NAMESPACE_1}","MODULE_NAMESPACE_2=${env.MODULE_NAMESPACE_2}","GCP_PROJ=${env.GCP_PROJ}","K8S_CLUSTER_NAME=${env.K8S_CLUSTER_NAME}","K8S_CLUSTER_ZONE=${env.K8S_CLUSTER_ZONE}"]) {                            
        //                     sh '''
        //                         # Set the Kubernetes context explicitly to the Google Cloud Kubernetes Cluster
        //                         KUBECTL_GCLOUD_CONTEXT="gke_${GCP_PROJ}_${K8S_CLUSTER_ZONE}_${K8S_CLUSTER_NAME}"
        //                         kubectl config use-context ${KUBECTL_GCLOUD_CONTEXT}

        //                         # Verify the kubectl context
        //                         kubectl config current-context
                                
        //                         # Authenticate with Google Cloud using a service account key
        //                         gcloud auth activate-service-account --key-file=${GCLOUD_KEY}

        //                         # Set the GKE cluster context
        //                         gcloud container clusters get-credentials ${K8S_CLUSTER_NAME} --zone ${K8S_CLUSTER_ZONE} --project ${GCP_PROJ}

        //                         # Deploy the ingress-nginx controller on Google Cloud Kubernetes Cluster via Skaffold
        //                         skaffold deploy --profile prod --module ${MODULE_NAMESPACE_1}

        //                         sleep 20
        //                         echo "Displaying the Kubernetes Deployments, Pods & Services for namespace - ${MODULE_NAMESPACE_1}"
        //                         kubectl get deployment  -n ${MODULE_NAMESPACE_1}
        //                         kubectl get pods        -n ${MODULE_NAMESPACE_1}
        //                         kubectl get services    -n ${MODULE_NAMESPACE_1}
                                
        //                         # Create the application namespace
        //                         kubectl apply -f ./infra/k8s/namespace/*

        //                         # Create a JWT Secret to be used for Authentication
        //                         kubectl create secret generic jwt-secret -n ${MODULE_NAMESPACE_2} --from-literal=JWT_KEY="${JWT_KEY}"

        //                         # Deploy the updated kubernetes deployment manifest files on Google Cloud Kubernetes Cluster via kubectl
        //                         kubectl apply -f ./infra/k8s/client/*
        //                         kubectl apply -f ./infra/k8s/database/*
        //                         kubectl apply -f ./infra/k8s/auth-service/*
        //                         kubectl apply -f ./infra/k8s/ingress/*

        //                         sleep 20
        //                         echo "Displaying the Kubernetes Deployments, Pods & Services for namespace - ${MODULE_NAMESPACE_2}"
        //                         kubectl get deployment  -n ${MODULE_NAMESPACE_2}
        //                         kubectl get pods        -n ${MODULE_NAMESPACE_2}
        //                         kubectl get services    -n ${MODULE_NAMESPACE_2}

        //                     '''
        //                 }
        //             }
        //         }
        //     }
        // }

        stage('Cleanup Deployment on Local Kubernetes Cluster') {
            steps {
                script {
                    withEnv(["MODULE_NAMESPACE_1=${env.MODULE_NAMESPACE_1}","MODULE_NAMESPACE_2=${env.MODULE_NAMESPACE_2}","KUBECTL_DEV_CONTEXT=${env.KUBECTL_DEV_CONTEXT}"]) {
                        sh '''                          
                            # Set the Kubernetes context explicitly
                            kubectl config use-context ${KUBECTL_DEV_CONTEXT}

                            # Verify the kubectl context
                            kubectl config current-context
                        
                            # Delete the JWT secret
                            kubectl delete secret jwt-secret -n ${MODULE_NAMESPACE_2}
                            
                            # Stop skaffold 
                            echo "Stopping skaffold to clean up the deployed applications & services for all kubernetes namespaces..."
                            skaffold delete --profile dev --module ${MODULE_NAMESPACE_1}
                            skaffold delete --profile dev --module ${MODULE_NAMESPACE_2}
                            sleep 30
                        '''
                        
                        // Access the environment variable from the previous stage
                        DOCKER_IMAGE_NAMES = readFile('docker_image_names.txt').trim()
                        
                        // Delete locally built Docker Images iterating on the names
                        DOCKER_IMAGE_NAMES.tokenize(",").each { name ->
                            sh """
                                # Delete skaffold generated Docker images on the Agent Node
                                echo "Deleting skaffold generated Docker image $name on the Agent Node"
                                docker images --format "{{.Repository}}:{{.Tag}}" | grep "^$name:" | xargs -I {} docker rmi {}
                            """
                        }
                        
                        sh '''
                            # Get the list of container IDs for created & exited containers
                            created_container_ids=$(docker ps -aq -f status=created)
                            exited_container_ids=$(docker ps -aq -f status=exited)
                            
                            # Remove created containers if the list is not empty 
                            if [ -n "$created_container_ids" ]; then
                                # Remove created containers
                                docker rm -f $created_container_ids
                                echo "Created containers removed"
                            else
                                echo "No created containers found"
                            fi
                            
                            # Remove exited containers if the list is not empty
                            if [ -n "$exited_container_ids" ]; then
                                # Remove exited containers
                                docker rm -f $exited_container_ids
                                echo "Exited containers removed"
                            else
                                echo "No exited containers found"
                            fi
                            
                            # Remove any dangling images thereafter
                            echo "Removing any dangling images"
                            docker image prune -f
                        '''
                    }
                }
            }
        }

        stage('Create new Google Cloud Kubernetes Cluster using Ansible') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gke-service-account-key', variable: 'GCLOUD_KEY')]) {
                        withEnv(["GCP_PROJ=${env.GCP_PROJ}","GCP_REGION=${env.GCP_REGION}","K8S_CLUSTER_NAME=${env.K8S_CLUSTER_NAME}","K8S_CLUSTER_ZONE=${env.K8S_CLUSTER_ZONE}","K8S_NODE_TYPE=${env.K8S_NODE_TYPE}","K8S_NODE_COUNT=${env.K8S_NODE_COUNT}"]) {
                            sh '''
                                ansible-playbook -i ./gke-inventory.ini ./gke-cluster-playbook.yaml -e "GCLOUD_KEY=${GCLOUD_KEY}" -e "GCP_PROJ=${GCP_PROJ}" -e "GCP_REGION=${GCP_REGION}" -e "K8S_CLUSTER_NAME=${K8S_CLUSTER_NAME}" -e "K8S_CLUSTER_ZONE=${K8S_CLUSTER_ZONE}" -e "K8S_NODE_TYPE=${K8S_NODE_TYPE}" -e "K8S_NODE_COUNT=${K8S_NODE_COUNT}"
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy Application on Google Cloud Kubernetes Cluster using Ansible') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gke-service-account-key', variable: 'GCLOUD_KEY'), string(credentialsId: 'jwt-secret-key', variable: 'JWT_KEY')]) {
                        withEnv(["MODULE_NAMESPACE_1=${env.MODULE_NAMESPACE_1}","MODULE_NAMESPACE_2=${env.MODULE_NAMESPACE_2}","GCP_PROJ=${env.GCP_PROJ}","K8S_CLUSTER_NAME=${env.K8S_CLUSTER_NAME}","K8S_CLUSTER_ZONE=${env.K8S_CLUSTER_ZONE}"]) {
                            sh '''
                                ansible-playbook -i ./gke-inventory.ini ./gke-deploy-playbook.yaml -e "GCLOUD_KEY=${GCLOUD_KEY}" -e "JWT_KEY=${JWT_KEY}" -e "MODULE_NAMESPACE_1=${MODULE_NAMESPACE_1}" -e "MODULE_NAMESPACE_2=${MODULE_NAMESPACE_2}" -e "GCP_PROJ=${GCP_PROJ}" -e "K8S_CLUSTER_NAME=${K8S_CLUSTER_NAME}" -e "K8S_CLUSTER_ZONE=${K8S_CLUSTER_ZONE}"
                            '''
                        }
                    }
                }
            }
        }
    }
}